/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="isubscriptions.service.ts" />
var AngularTest;
(function (AngularTest) {
    'use strict';
    var StreamsService = (function () {
        /** @ngInject */
        function StreamsService() {
            this.defaultEvents = {
                "OBJECT_CREATE": "ocreated",
                "OBJECT_DELETE": "odeleted",
                "OBJECT_UPDATE": "oupdated",
                "COLLECTION_LOADED": "cloaded",
                "OBJECT_LOAD": "oloaded",
                "COLLECTION_OBJECT_REMOVED": "coremoved"
            };
            this.generalListeners = [];
            this.streams = {};
        }
        StreamsService.prototype.setStream = function (streamKey, stream) {
            if (!this.streams[streamKey]) {
                this.streams[streamKey] = stream;
                this.generalListeners.forEach(function (listener) {
                    listener.onNext(stream);
                });
            }
        };
        StreamsService.prototype.setGeneralListener = function (thread) {
            this.generalListeners.push(thread);
        };
        StreamsService.prototype.getGeneralListener = function () {
        };
        StreamsService.prototype.getStream = function (streamKey) {
            if (!this.streams[streamKey]) {
                this.setStream(streamKey, new Rx.Subject());
            }
            return this.streams[streamKey];
        };
        StreamsService.prototype.getStreams = function () {
            return this.streams;
        };
        return StreamsService;
    })();
    AngularTest.StreamsService = StreamsService;
    angular.module('angularTest').service('StreamsService', StreamsService);
})(AngularTest || (AngularTest = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbnMvc3Vic2NyaXB0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIkFuZ3VsYXJUZXN0IiwiQW5ndWxhclRlc3QuU3RyZWFtc1NlcnZpY2UiLCJBbmd1bGFyVGVzdC5TdHJlYW1zU2VydmljZS5jb25zdHJ1Y3RvciIsIkFuZ3VsYXJUZXN0LlN0cmVhbXNTZXJ2aWNlLnNldFN0cmVhbSIsIkFuZ3VsYXJUZXN0LlN0cmVhbXNTZXJ2aWNlLnNldEdlbmVyYWxMaXN0ZW5lciIsIkFuZ3VsYXJUZXN0LlN0cmVhbXNTZXJ2aWNlLmdldEdlbmVyYWxMaXN0ZW5lciIsIkFuZ3VsYXJUZXN0LlN0cmVhbXNTZXJ2aWNlLmdldFN0cmVhbSIsIkFuZ3VsYXJUZXN0LlN0cmVhbXNTZXJ2aWNlLmdldFN0cmVhbXMiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFFbEQsSUFBTyxXQUFXLENBb0RqQjtBQXBERCxXQUFPLFdBQVcsRUFBQyxDQUFDO0lBQ2hCQSxZQUFZQSxDQUFDQTtJQUViQSxJQUFhQSxjQUFjQTtRQWV2QkMsZ0JBQWdCQTtRQUNoQkEsU0FoQlNBLGNBQWNBO1lBRWhCQyxrQkFBYUEsR0FBR0E7Z0JBQ25CQSxlQUFlQSxFQUFFQSxVQUFVQTtnQkFDM0JBLGVBQWVBLEVBQUVBLFVBQVVBO2dCQUMzQkEsZUFBZUEsRUFBRUEsVUFBVUE7Z0JBQzNCQSxtQkFBbUJBLEVBQUVBLFNBQVNBO2dCQUM5QkEsYUFBYUEsRUFBRUEsU0FBU0E7Z0JBQ3hCQSwyQkFBMkJBLEVBQUVBLFdBQVdBO2FBQzNDQSxDQUFDQTtZQUVNQSxxQkFBZ0JBLEdBQUdBLEVBQUVBLENBQUNBO1lBRXRCQSxZQUFPQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUlyQkEsQ0FBQ0E7UUFFREQsa0NBQVNBLEdBQVRBLFVBQVVBLFNBQWlCQSxFQUFFQSxNQUFXQTtZQUNwQ0UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDakNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBU0EsUUFBUUE7b0JBQzNDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzVCLENBQUMsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFREYsMkNBQWtCQSxHQUFsQkEsVUFBbUJBLE1BQVdBO1lBQzFCRyxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUVESCwyQ0FBa0JBLEdBQWxCQTtRQUNBSSxDQUFDQTtRQUVESixrQ0FBU0EsR0FBVEEsVUFBVUEsU0FBaUJBO1lBQ3ZCSyxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLE9BQU9BLEVBQU1BLENBQUNBLENBQUNBO1lBQ3BEQSxDQUFDQTtZQUNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFFREwsbUNBQVVBLEdBQVZBO1lBQ0lNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUNMTixxQkFBQ0E7SUFBREEsQ0E3Q0FELEFBNkNDQyxJQUFBRDtJQTdDWUEsMEJBQWNBLEdBQWRBLGNBNkNaQSxDQUFBQTtJQUVEQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUN4QkEsT0FBT0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtBQUNuREEsQ0FBQ0EsRUFwRE0sV0FBVyxLQUFYLFdBQVcsUUFvRGpCIiwiZmlsZSI6ImNvbW1vbnMvc3Vic2NyaXB0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImlzdWJzY3JpcHRpb25zLnNlcnZpY2UudHNcIiAvPlxuXG5tb2R1bGUgQW5ndWxhclRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydCBjbGFzcyBTdHJlYW1zU2VydmljZSBpbXBsZW1lbnRzIElTdHJlYW1zU2VydmljZSB7XG4gICAgXG4gICAgICAgIHB1YmxpYyBkZWZhdWx0RXZlbnRzID0ge1xuICAgICAgICAgICAgXCJPQkpFQ1RfQ1JFQVRFXCI6IFwib2NyZWF0ZWRcIixcbiAgICAgICAgICAgIFwiT0JKRUNUX0RFTEVURVwiOiBcIm9kZWxldGVkXCIsXG4gICAgICAgICAgICBcIk9CSkVDVF9VUERBVEVcIjogXCJvdXBkYXRlZFwiLFxuICAgICAgICAgICAgXCJDT0xMRUNUSU9OX0xPQURFRFwiOiBcImNsb2FkZWRcIixcbiAgICAgICAgICAgIFwiT0JKRUNUX0xPQURcIjogXCJvbG9hZGVkXCIsXG4gICAgICAgICAgICBcIkNPTExFQ1RJT05fT0JKRUNUX1JFTU9WRURcIjogXCJjb3JlbW92ZWRcIlxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBwcml2YXRlIGdlbmVyYWxMaXN0ZW5lcnMgPSBbXTtcbiAgICBcbiAgICAgICAgcHJpdmF0ZSBzdHJlYW1zID0ge307XG4gICAgXG4gICAgICAgIC8qKiBAbmdJbmplY3QgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgc2V0U3RyZWFtKHN0cmVhbUtleTogc3RyaW5nLCBzdHJlYW06IGFueSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0cmVhbXNbc3RyZWFtS2V5XSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tzdHJlYW1LZXldID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhbExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLm9uTmV4dChzdHJlYW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHNldEdlbmVyYWxMaXN0ZW5lcih0aHJlYWQ6IGFueSkge1xuICAgICAgICAgICAgdGhpcy5nZW5lcmFsTGlzdGVuZXJzLnB1c2godGhyZWFkKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBnZXRHZW5lcmFsTGlzdGVuZXIoKSB7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZ2V0U3RyZWFtKHN0cmVhbUtleTogc3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RyZWFtc1tzdHJlYW1LZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdHJlYW0oc3RyZWFtS2V5LCBuZXcgUnguU3ViamVjdDx7fT4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1zW3N0cmVhbUtleV07XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZ2V0U3RyZWFtcygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJUZXN0JylcbiAgICAgICAgLnNlcnZpY2UoJ1N0cmVhbXNTZXJ2aWNlJywgU3RyZWFtc1NlcnZpY2UpO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==