/// <reference path="../../../../../typings/tsd.d.ts" />
/// <reference path="../../../commons/subscriptions.service.ts" />
var AngularTest;
(function (AngularTest) {
    var Course;
    (function (Course) {
        'use strict';
        var CourseListController = (function () {
            function CourseListController(CourseService, StreamsService) {
                var _this = this;
                this.CourseService = CourseService;
                this.StreamsService = StreamsService;
                CourseService.query({ page: 0, size: 20 });
                this.courseThread = this.StreamsService.getStream('/api/course');
                this.courseThread.subscribe(function (notification) {
                    _this.courseList = notification.data;
                });
                this.courseConf = [
                    {
                        "sort": true,
                        "key": "name",
                        "label": "Name"
                    }
                ];
            }
            CourseListController.prototype.showCourseLabel = function (chosenCourse) {
                return 'Estas seguro que quieres eliminar a ' + chosenCourse.name;
            };
            CourseListController.$inject = ['CourseService', 'StreamsService'];
            return CourseListController;
        })();
        Course.CourseListController = CourseListController;
        angular.module('angularTest.course').controller('CourseListController', CourseListController);
    })(Course = AngularTest.Course || (AngularTest.Course = {}));
})(AngularTest || (AngularTest = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudGl0aWVzL2NvdXJzZS9saXN0L2NvdXJzZS5saXN0LmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOlsiQW5ndWxhclRlc3QiLCJBbmd1bGFyVGVzdC5Db3Vyc2UiLCJBbmd1bGFyVGVzdC5Db3Vyc2UuQ291cnNlTGlzdENvbnRyb2xsZXIiLCJBbmd1bGFyVGVzdC5Db3Vyc2UuQ291cnNlTGlzdENvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJBbmd1bGFyVGVzdC5Db3Vyc2UuQ291cnNlTGlzdENvbnRyb2xsZXIuc2hvd0NvdXJzZUxhYmVsIl0sIm1hcHBpbmdzIjoiQUFBQSx3REFBd0Q7QUFDeEQsa0VBQWtFO0FBRWxFLElBQU8sV0FBVyxDQXNDakI7QUF0Q0QsV0FBTyxXQUFXO0lBQUNBLElBQUFBLE1BQU1BLENBc0N4QkE7SUF0Q2tCQSxXQUFBQSxNQUFNQSxFQUFDQSxDQUFDQTtRQUN2QkMsWUFBWUEsQ0FBQ0E7UUFFYkEsSUFBYUEsb0JBQW9CQTtZQVU3QkMsU0FWU0Esb0JBQW9CQSxDQVVWQSxhQUFhQSxFQUFVQSxjQUE4QkE7Z0JBVjVFQyxpQkErQkNBO2dCQXJCc0JBLGtCQUFhQSxHQUFiQSxhQUFhQSxDQUFBQTtnQkFBVUEsbUJBQWNBLEdBQWRBLGNBQWNBLENBQWdCQTtnQkFDcEVBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLEVBQUNBLElBQUlBLEVBQUNBLENBQUNBLEVBQUVBLElBQUlBLEVBQUNBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO2dCQUV2Q0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7Z0JBRWpFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFDQSxZQUFZQTtvQkFDckNBLEtBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBO2dCQUN4Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRUhBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBO29CQUNkQTt3QkFDSUEsTUFBTUEsRUFBRUEsSUFBSUE7d0JBQ1pBLEtBQUtBLEVBQUVBLE1BQU1BO3dCQUNiQSxPQUFPQSxFQUFFQSxNQUFNQTtxQkFDbEJBO2lCQUNKQSxDQUFBQTtZQUNMQSxDQUFDQTtZQUVERCw4Q0FBZUEsR0FBZkEsVUFBZ0JBLFlBQVlBO2dCQUN4QkUsTUFBTUEsQ0FBQ0Esc0NBQXNDQSxHQUFHQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0RUEsQ0FBQ0E7WUE1Qk1GLDRCQUFPQSxHQUFrQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtZQTZCeEVBLDJCQUFDQTtRQUFEQSxDQS9CQUQsQUErQkNDLElBQUFEO1FBL0JZQSwyQkFBb0JBLEdBQXBCQSxvQkErQlpBLENBQUFBO1FBRURBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FDL0JBLFVBQVVBLENBQUNBLHNCQUFzQkEsRUFBRUEsb0JBQW9CQSxDQUFDQSxDQUFDQTtJQUNsRUEsQ0FBQ0EsRUF0Q2tCRCxNQUFNQSxHQUFOQSxrQkFBTUEsS0FBTkEsa0JBQU1BLFFBc0N4QkE7QUFBREEsQ0FBQ0EsRUF0Q00sV0FBVyxLQUFYLFdBQVcsUUFzQ2pCIiwiZmlsZSI6ImVudGl0aWVzL2NvdXJzZS9saXN0L2NvdXJzZS5saXN0LmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vY29tbW9ucy9zdWJzY3JpcHRpb25zLnNlcnZpY2UudHNcIiAvPlxuXG5tb2R1bGUgQW5ndWxhclRlc3QuQ291cnNlIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBleHBvcnQgY2xhc3MgQ291cnNlTGlzdENvbnRyb2xsZXIge1xuICAgIFxuICAgICAgICBzdGF0aWMgJGluamVjdDogQXJyYXk8c3RyaW5nPiA9IFsnQ291cnNlU2VydmljZScsICdTdHJlYW1zU2VydmljZSddO1xuICAgIFxuICAgICAgICBwdWJsaWMgY291cnNlTGlzdDogQXJyYXk8YW55PjtcbiAgICBcbiAgICAgICAgcHVibGljIGNvdXJzZUNvbmY7XG4gICAgXG4gICAgICAgIHB1YmxpYyBjb3Vyc2VUaHJlYWQ7XG4gICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBDb3Vyc2VTZXJ2aWNlLCBwcml2YXRlIFN0cmVhbXNTZXJ2aWNlOiBTdHJlYW1zU2VydmljZSkge1xuICAgICAgICAgICAgQ291cnNlU2VydmljZS5xdWVyeSh7cGFnZTowLCBzaXplOjIwfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY291cnNlVGhyZWFkID0gdGhpcy5TdHJlYW1zU2VydmljZS5nZXRTdHJlYW0oJy9hcGkvY291cnNlJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY291cnNlVGhyZWFkLnN1YnNjcmliZSgobm90aWZpY2F0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3Vyc2VMaXN0ID0gbm90aWZpY2F0aW9uLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5jb3Vyc2VDb25mID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJzb3J0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTmFtZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHNob3dDb3Vyc2VMYWJlbChjaG9zZW5Db3Vyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAnRXN0YXMgc2VndXJvIHF1ZSBxdWllcmVzIGVsaW1pbmFyIGEgJyArIGNob3NlbkNvdXJzZS5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyVGVzdC5jb3Vyc2UnKVxuICAgICAgICAuY29udHJvbGxlcignQ291cnNlTGlzdENvbnRyb2xsZXInLCBDb3Vyc2VMaXN0Q29udHJvbGxlcik7XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9